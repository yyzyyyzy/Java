/*

局部内部类适合在以下场景中使用：

    1. 封装逻辑和数据：
    当某些逻辑或数据只在特定方法中使用，并且不需要在方法外部访问时，可以使用局部内部类来封装这些逻辑和数据，
    从而避免污染外部类的命名空间。

    2. 实现复杂的逻辑
    当方法中的逻辑较为复杂，需要多个辅助方法或数据来完成时，可以使用局部内部类将这些辅助方法和数据封装在一起，
    使代码更清晰、更有组织。

    3. 事件处理：
    在图形用户界面（GUI）编程中，经常需要处理事件。局部内部类可以用来定义特定事件处理器，保持事件处理逻辑的局部性和封装性。
    例如，在按钮点击事件处理中定义局部内部类来处理点击逻辑。

    4. 临时使用的类：
    当某个类只在一个方法中短期使用时，使用局部内部类可以避免为这个类定义一个独立的顶级类，减少代码的复杂性。
    回调机制：

 */

public class LocalOuter {
    // 定义一个局部变量
    private int x = 10;

    // 一个简单的方法，内部包含局部内部类
    public void outerMethod() {
        // 局部内部类
        class LocalInner {
            public void innerMethod() {
                // 可以访问外部方法的局部变量
                System.out.println("The value of x is: " + x);
            }
        }

        // 创建内部类的实例并调用方法
        LocalInner inner = new LocalInner();
        inner.innerMethod();
    }
}