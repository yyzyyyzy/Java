/*
Java的类方法（静态方法）具有以下特点：

    唯一性：类方法属于整个类，只有一份拷贝存在于内存中。无论创建多少个类的实例，类方法始终只有一个。

    共享性：所有对象共享同一个类方法。当一个对象调用类方法时，对其他对象没有影响，它们仍然可以访问和调用相同的类方法。

    不依赖于对象实例：类方法不需要通过对象实例来调用，可以直接使用类名访问。因此，不需要创建对象实例就可以调用和使用类方法。

    无法访问非静态成员：类方法不能直接访问非静态成员变量和非静态方法，因为它们与对象实例相关联，而类方法没有对象实例。

应用场景：

    工具类：类方法常用于提供工具功能，例如数学类中的数学运算方法（如求平方根、绝对值等），日期类中的日期转换方法等。

    常量定义：类方法可以用于定义常量，例如Math.PI表示圆周率π。

    计数器：类方法可以用于实现计数器功能，记录某个事件发生的次数，不依赖于对象的实例。

    静态工厂方法：类方法可以用于创建对象实例，常见的例子是valueOf()方法，用于创建包装类对象。

注意事项：

    类方法可以直接访问类的成员，不可直接访问实例成员。

    实例方法可以访问类的成员和实例成员

    实例方法可以出现this关键字，类方法不可以出现this关键字

总之，类方法适用于无需访问实例变量或方法、提供公共功能、不依赖于对象实例的场景。使用类方法可以简化代码，提高程序的可读性和性能
 */

public class CodeTest {
    public static void main(String[] args) {
        System.out.println(Code.createCode(4));
    }
}

class Code {
    //类方法（工具类：生成随机的四位验证码）
    private Code() {
        //将工具类进行私有化，避免创建对象浪费内存
    }

    public static String createCode(int n) {
        StringBuilder code = new StringBuilder();
        for (int i = 0; i < n; i++) {
            int random = (int) (Math.random() * 10);
            code.append(random);
        }
        return code.toString();
    }
}
