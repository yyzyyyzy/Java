HashSet
    HashSet集合底层采用哈希表存储数据
    哈希表是一种对与增删改查数据性能都较好的结构

哈希表组成
    JDK8之前：数组+链表
    JDK8之后：数组+链表+红黑树

哈希值：对象的整数表现形式
    根据hashCode方法算出来的int类型的整数
    该方法定义在Object类中，所有对象都可以调用，默认使用地址值进行计算
    一般情况下，会重写hashCode方法，利用对象内部的属性值计算哈希值

1.创建一个默认长度16，默认加载因子0.75的数组，数组名table
    加载因子：扩容时机
    当存入数据达到16 x 0.75 = 12时候，数组扩容成原数组的二倍
    JKD8以后：当链表长度大于8而且数组长度大于等于64，当前链表自动转成红黑树，增加查找效率
2.根据元素的哈希值跟数组的长度计算出应存入的位置
    int index = (数组长度 - 1) & 哈希值;
    如果集合中存储的是自定义对象，必须要重写hashCode和equsl方法

3.判断当前位置是否为null，如果是null直接存入（添加元素）

4.如果位置不是null，表示有元素，则调用equals方法比较属性值
    JDK8以前：链表法解决冲突
        在 JDK8 之前，HashMap 使用的是数组 + 链表的结构来存储元素，并解决哈希冲突。具体理解如下：
            数组 + 链表结构：
                HashMap 内部使用一个数组来存储元素，每个数组元素称为桶（bucket）。
                桶中的每个元素实际上是一个链表的头节点，或者说是链表的起始位置。
            哈希冲突的处理：
                当多个元素映射到同一个桶时，它们会形成一个链表结构。
                新元素通过计算哈希值确定其应该存放的桶位置后，会直接插入到链表的头部（即作为新的头节点），旧的元素保持不动
    JDK8 及之后的 HashMap 实现（链表和红黑树结构优化）：
        在 JDK8 中，HashMap 对于解决冲突的方式进行了优化，引入了红黑树（Red-Black Tree）来提高查找效率：
            链表转红黑树：
                当一个桶中的链表长度超过一定阈值（默认为 8）时，链表会转换成红黑树。
                这个阈值的设定是为了在链表长度较长时，提升查找效率，因为红黑树的查找时间复杂度是 O(log n)。
            插入新元素：
                新元素的插入方式与 JDK8 之前基本相同，即将新元素插入到桶的头部。
                如果在插入新元素后，链表长度达到阈值，且数组长度大于等于64，则链表会转换为红黑树。

