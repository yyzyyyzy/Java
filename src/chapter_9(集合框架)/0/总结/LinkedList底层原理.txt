LinkedList 的底层原理
    LinkedList 基于双向链表实现，每个元素（节点）包含一个数据域（实际存储的数据）和两个指针（前驱和后继节点的引用）。

主要特点：
    插入和删除效率高：在链表中插入或删除元素时，只需调整相关节点的引用，时间复杂度为 O(1)。但是，前提是已定位到要操作的节点。
    随机访问性能差：由于链表不支持通过索引进行快速访问，需要从头节点开始逐个遍历到目标节点，时间复杂度为 O(n)。
    双向链表：LinkedList 是双向链表，因此可以方便地进行前后遍历操作。

适用场景：
    需要频繁插入和删除元素的场景，特别是在中间位置进行操作。
    不需要频繁随机访问元素的场景。