底层数据结构
    TreeSet 底层使用红黑树来存储元素。红黑树是一种自平衡的二叉搜索树，具有以下性质：
        1. 每个节点是红色或黑色。
        2. 根节点是黑色。
        3. 所有叶子节点都是黑色（叶子节点是空节点）。
        4. 每个红色节点的两个子节点都是黑色（没有两个相邻的红色节点）。
        5. 从任一节点到其每个叶子的所有路径都包含相同数量的黑色节点。
    这些性质保证了树的平衡，从而使得基本的动态集合操作（例如插入、删除和查找）的时间复杂度是 O(log n)。

工作原理
    插入元素：
        插入新元素时，TreeSet 会在红黑树中找到适当的位置插入新节点，同时保持红黑树的平衡性质。插入的时间复杂度为 O(log n)。

    删除元素：
        删除元素时，TreeSet 会在红黑树中找到相应的节点并将其删除，同时重新平衡树。删除的时间复杂度为 O(log n)。

    查找元素：
        查找元素时，TreeSet 会在红黑树中进行二分查找。查找的时间复杂度为 O(log n)。

    排序：
        由于红黑树是二叉搜索树，TreeSet 中的元素总是保持有序。这意味着每次插入元素后，元素集合都按照自然顺序或指定的比较器排序。

主要特点
    有序性：TreeSet 中的元素按自然顺序（或通过自定义的 Comparator）排序。
    唯一性：TreeSet 不允许存储重复的元素。
    效率：由于红黑树的性质，TreeSet 中的基本操作（插入、删除、查找）时间复杂度均为 O(log n)。